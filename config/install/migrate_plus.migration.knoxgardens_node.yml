# Uninstall this config when the feature is uninstalled
dependencies:
  enforced:
    module:
      - migrate_islandora_csv

id: knoxgardens_node
label: Import Knoxville Garden Slides Nodes
migration_group: knoxgardens_migrate_islandora_csv

source:
  plugin: csv
  path: modules/contrib/migrate_islandora_csv/data/knoxgardens_migration.csv

  # 1 means you have a header row, 0 means you don't
  header_row_count: 1

  # Each migration needs a unique key per row in the csv.  Here we're using the file path.
  keys:
    - ID

  # You can't enter string literals into a process plugin, but you can give it a constant as a 'source'.
  constants:
    # We're tagging our nodes as Images
    model: Image

    display: Open Seadragon
    collection: Migration Test Collection
    # Everything gets created as admin
    uid: 1

# Set fields using values from the CSV
process:
  title: title_transcribed
  uid: constants/uid
  plugin: log

  # We use the skip_on_empty plugin because
  # not every row in the CSV has subtitle filled
  # in.
  fields_identifier:
    plugin: skip_on_empty
    source: Islandora_link
    method: process

  field_alternative_title:
    plugin: skip_on_empty
    source: supplied_title
    method: process

  field_description:
    plugin: skip_on_empty
    source: abstract
    method: process

  # Dates are EDTF strings
  field_edtf_date:
    plugin: skip_on_empty
    source: date
    method: process

  # Make the object an 'Image'
  field_model:
    plugin: entity_lookup
    source: constants/model
    entity_type: taxonomy_term
    value_key: name
    bundle_key: vid
    bundle: islandora_models

   # Set display to 'Openseadragon'
  field_display_hints:
    plugin: entity_lookup
    source: constants/display
    entity_type: taxonomy_term
    value_key: name
    bundle_key: vid
    bundle: islandora_display

  # Split up our pipe-delimited string of
  # subjects, and generate terms for each.
  field_subject:
    -
      plugin: skip_on_empty
      source: subject
      method: process
    -
      plugin: explode
      delimiter: '|'
    -
      plugin: entity_generate
      entity_type: taxonomy_term
      value_key: name
      bundle_key: vid
      bundle: subject

  parent_id:
    plugin: migration_lookup
    source: parent_id
    migration: knoxgardens_node
    no_stub: true

  collection_id:
    plugin: entity_lookup
    source: constants/collection
    entity_type: node
    value_key: title
    bundle_key: type
    bundle: islandora_object
    ignore_case: true

  # collection_id:
  #   plugin: entity_lookup
  #   source: constants/collection
  #   entity_type: node
  #   value_key: title
  #   bundle_key: type
  #   bundle: islandora_object
  #   ignore_case: true
  #   message: 'Failed to find collection object'

  field_pid:
    plugin: skip_on_empty
    source: PID
    method: process

  field_right:
    plugin: skip_on_empty
    source: rights
    method: process

  field_member_of:
    -
      plugin: concat
      source:
        - '@parent_id'
        - '@collection_id'
      method: process
    -
      plugin: skip_on_empty
      method: process

  # If you have multiple values of a complex
  # field, iterate over them using sub_process.
  # But sub_process requires structured data
  # i.e. an associative array, not a string
  # or list of strings. To turn strings into
  # associative arrays, use the custom
  # process plugin str_to_assoc.

  # Extract a list of names from the column
  # called photographer, and transform it into
  # an array of associative arrays.
  photographers:
    -
      source: photographer
      plugin: skip_on_empty
      method: process
    -
      plugin: explode
      delimiter: '|'
    -
      plugin: str_to_assoc
      key: 'name'

  # Iterate over the array of associative arrays.
  # We create the taxonomy terms here so that we
  # can specify the bundle - other columns which
  # might feed into Linked Agent may contain
  # corporate bodies or families. The resulting
  # array contains the resulting term id (tid)
  # under the key 'target_id'.
  # We also add a key-value pair
  # 'rel_type' => 'relators:pht'. Other columns
  # might use different relators.
  linked_agent_pht:
    plugin: sub_process
    source: '@photographers'
    process:
      target_id:
        plugin: entity_generate
        source: name
        entity_type: taxonomy_term
        value_key: name
        bundle_key: vid
        bundle: person
      rel_type:
        plugin: default_value
        default_value: 'relators:pht'

  # Extract an array of names from the column
  # called provider
  providers:
    -
      source: provider
      plugin: skip_on_empty
      method: process
    -
      plugin: explode
      delimiter: '|'
    -
      plugin: str_to_assoc
      key: 'name'
  # Generate/lookup taxonomy terms in the
  # corporate body vocab, and add the rel_type.
  linked_agent_prv:
    plugin: sub_process
    source: '@providers'
    process:
      target_id:
        plugin: entity_generate
        source: name
        entity_type: taxonomy_term
        value_key: name
        bundle_key: vid
        bundle: 'corporate_body'
      rel_type:
        plugin: default_value
        default_value: 'relators:prv'

  # Write to the linked agent field. In this case
  # we first want to merge the info from the
  # photographer and provider columns. Since we
  # already prepared our structured array using
  # the components of the typed_relation field as
  # keys ('target_id' and 'rel_type'), we can just
  # pass this array into field_linked_agent.
  field_linked_agent:
    plugin: merge
    source:
      - '@linked_agent_pht'
      - '@linked_agent_prv'

  field_right:
    plugin: skip_on_empty
    source: rights_URI
    method: process

  field_note:
    plugin: skip_on_empty
    source: note
    method: process

# We're making nodes
destination:
  plugin: 'entity:node'
  default_bundle: islandora_object
